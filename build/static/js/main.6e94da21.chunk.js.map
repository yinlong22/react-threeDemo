{"version":3,"sources":["renderHelper.js","demo/初始demo.js","demo/画线demo.js","demo/Home.js","demo/文字demo.js","demo/3DGlb.js","demo/3DDTexture.js","demo/3DAnimat.js","demo/3DEarth.js","demo/BeautifulEarth.js","EarthScreen/city.js","EarthScreen/EarthScreen.js","App.js","index.js"],"names":["renderHelper","dom","el","document","querySelector","innerHTML","appendChild","InitDemo","scene","THREE","camera","window","innerWidth","innerHeight","renderer","setSize","domElement","geometry","material","color","cube","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","DrawLineDemo","set","lookAt","points","push","setFromPoints","line","Home","className","to","FontDemo","onWindowResize","aspect","updateProjectionMatrix","background","load","font","matDark","side","matLite","transparent","opacity","shapes","generateShapes","computeBoundingBox","xMid","boundingBox","max","min","translate","text","holeShapes","i","length","shape","holes","j","hole","apply","lineText","getPoints","lineMesh","antialias","setPixelRatio","devicePixelRatio","controls","OrbitControls","target","update","addEventListener","init","TDGlb","outputEncoding","minDistance","maxDistance","enablePan","light","GLTFLoader","gltf","traverse","child","isMesh","normalMapType","deleteAttribute","scale","multiplyScalar","setFromObject","getCenter","TDTexture","mesh","API","offsetX","offsetY","repeatX","repeatY","Math","PI","centerX","centerY","maxPolarAngle","texture","wrapS","wrapT","anisotropy","capabilities","getMaxAnisotropy","map","matrixAutoUpdate","offset","repeat","center","matrix","identity","rotate","updateUvTransform","TDAnimation","container","stats","clock","gui","mixer","actions","activeAction","previousAction","model","face","api","state","fadeToAction","name","duration","fadeOut","reset","setEffectiveTimeScale","setEffectiveWeight","fadeIn","play","fog","hemiLight","dirLight","depthWrite","grid","animations","querySelectorAll","remove","states","emotes","GUI","clip","action","clipAction","indexOf","clampWhenFinished","loop","statesFolder","addFolder","options","onChange","open","emoteFolder","createEmoteCallback","restoreState","removeEventListener","getObjectByName","expressions","Object","keys","morphTargetDictionary","expressionFolder","morphTargetInfluences","createGUI","undefined","e","console","error","Stats","dt","getDelta","TDEarth","earthMesh","cloudsMesh","alpha","canvas","setClearColor","initStats","earthGeo","earthMater","initEarth","cloudsGeo","cloudsMater","alphaMap","initClouds","clear","BeautifulEarth","pointMesh","createPointMesh","planGeometry","coord","lng","lat","radius","theta","phi","setFromSpherical","Point","rotateY","aGeo","aMater","bMesh","rotateX","groupMesh","coordVec3","normalize","meshNormal","quaternion","setFromUnitVectors","setTimeout","threeStart","positions","colors","vertex","random","setHSL","r","g","b","setAttribute","starsMaterial","size","vertexColors","blending","sizeAttenuation","stars","initStars","useEffect","LOCATIONS","EarthScreen","tween","city","mouse","locationGroup","raycaster","textureLoader","correctRotate","toFixed","onPointClick","preventDefault","clientX","clientY","setFromCamera","intersects","intersectObjects","children","object","rotateToCenter","cityName","cityText","innerText","rotateRad","degToRad","lt","lg","finalY","abs","intervalX","intervalY","needRotateX","needRotateY","stop","TWEEN","Tween","rotateLoc","easing","Easing","Sinusoidal","InOut","onUpdate","this","_object","onComplete","start","allLight","sun","initLight","specular","shininess","specularMap","bumpMap","forEach","location","sprite","pos","sin","temp","cos","spriteText","toLowerCase","find","App","exact","path","component","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6e94da21.chunk.js","sourcesContent":["export const renderHelper = (dom) =>{\n    const el = document.querySelector('.showDemos')\n    if (!el)return\n    el.innerHTML = ''\n    el.appendChild(dom)\n}","import * as THREE from 'three'\nimport {renderHelper} from \"../renderHelper\";\n\nexport const InitDemo = () => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderHelper(renderer.domElement)\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({color: 0x00ff00});\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    camera.position.z = 5;\n\n    const animate = function () {\n        requestAnimationFrame(animate);\n\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n\n        renderer.render(scene, camera);\n    };\n\n    animate();\n    return (\n        <div/>\n    )\n}\n","import * as THREE from 'three'\nimport {renderHelper} from \"../renderHelper\";\n\nexport const DrawLineDemo = () => {\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderHelper(renderer.domElement)\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 500);\n    camera.position.set(0, 0, 100);\n    camera.lookAt(0, 0, 0);\n\n    const scene = new THREE.Scene();\n    const material = new THREE.LineBasicMaterial({color: 0x0000ff});\n    const points = [];\n    points.push(new THREE.Vector3(-10, 0, 0));\n    points.push(new THREE.Vector3(0, 10, 0));\n    points.push(new THREE.Vector3(10, 0, 0));\n\n    const geometry = new THREE.BufferGeometry().setFromPoints(points);\n    new THREE.Line(geometry, material);\n    const line = new THREE.Line(geometry, material);\n    scene.add(line);\n    renderer.render(scene, camera);\n\n    return (\n        <div />\n    )\n}\n\n","import {Link} from \"react-router-dom\";\nimport '../App.css';\n\nexport const Home = () => {\n    return (\n        <div className='nav' >\n            <Link to='/DrawLineDemo'>画线demo</Link>\n            <Link to='/InitDemo'>滚动demo</Link>\n            <Link to='/FontDemo'>文字demo</Link>\n            <Link to='/3DGlb'>3D-glb</Link>\n            <Link to='/3DTexture'>3D-texture</Link>\n            <Link to='/TDAnimation'>3D-Animation</Link>\n            <Link to='/TDEarth'>3D-Earth</Link>\n            <Link to='/BeautifulEarth'>3D-BeautifulEarth</Link>\n            <Link to='/EarthScreen'>3D-EarthScreen</Link>\n        </div>\n    )\n}\n","import * as THREE from 'three'\nimport {renderHelper} from \"../renderHelper\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\n\nexport const FontDemo = () => {\n    let camera, scene, renderer;\n    init();\n    animate();\n\n    function init() {\n        // 相机\n        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n        camera.position.set(100, -1600, 1800);\n\n        // 场景\n        scene = new THREE.Scene();\n        scene.background = new THREE.Color(0xf0f0f0);\n\n        // loader\n        const loader = new THREE.FontLoader();\n        loader.load('/helvetiker_bold.typeface.json', function (font) {\n            const color = 0x006699;\n            // 阴影粗体\n            const matDark = new THREE.LineBasicMaterial({\n                color: color,\n                side: THREE.DoubleSide\n            });\n            // 字体\n            const matLite = new THREE.MeshBasicMaterial({\n                color: color,\n                transparent: true,\n                opacity: 0.4,\n                side: THREE.DoubleSide\n            });\n            const message = \"   Text What\\nYou Want to text.\";\n            const shapes = font.generateShapes(message, 100);\n            const geometry = new THREE.ShapeGeometry(shapes);\n            geometry.computeBoundingBox();\n            const xMid = -0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x);\n            geometry.translate(xMid, 0, 0);\n\n            const text = new THREE.Mesh(geometry, matLite);\n            text.position.z = -150;\n            scene.add(text);\n            const holeShapes = [];\n            for (let i = 0; i < shapes.length; i++) {\n                const shape = shapes[i];\n                if (shape.holes && shape.holes.length > 0) {\n                    for (let j = 0; j < shape.holes.length; j++) {\n                        const hole = shape.holes[j];\n                        holeShapes.push(hole);\n                    }\n                }\n            }\n            shapes.push.apply(shapes, holeShapes);\n\n            const lineText = new THREE.Object3D();\n            for (let i = 0; i < shapes.length; i++) {\n                const shape = shapes[i];\n                const points = shape.getPoints();\n                const geometry = new THREE.BufferGeometry().setFromPoints(points);\n                geometry.translate(xMid, 0, 0);\n                const lineMesh = new THREE.Line(geometry, matDark);\n                lineText.add(lineMesh);\n            }\n            scene.add(lineText);\n        });\n        renderer = new THREE.WebGLRenderer({antialias: true});\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderHelper(renderer.domElement)\n\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.target.set(0, 0, 0);\n        controls.update();\n\n        window.addEventListener('resize', onWindowResize);\n    }\n\n    function onWindowResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function animate() {\n        requestAnimationFrame(animate);\n        render();\n    }\n\n    function render() {\n        renderer.render(scene, camera);\n    }\n\n    return (\n        <div/>\n    )\n}\n","import * as THREE from 'three'\nimport {renderHelper} from \"../renderHelper\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport {GLTFLoader} from \"three/examples/jsm/loaders/GLTFLoader\";\n\nexport const TDGlb = () => {\n    let renderer, scene, camera;\n    init();\n\n    function init() {\n        // renderer\n        renderer = new THREE.WebGLRenderer();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderHelper(renderer.domElement)\n\n        renderer.outputEncoding = THREE.sRGBEncoding;\n\n        // scene\n        scene = new THREE.Scene();\n\n        // camera\n        camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 1000);\n        camera.position.set(-10, 0, 23);\n        scene.add(camera);\n\n        // controls\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.addEventListener('change', render);\n        controls.minDistance = 10;\n        controls.maxDistance = 50;\n        controls.enablePan = false;\n\n        // ambient\n        scene.add(new THREE.AmbientLight(0xffffff, .2));\n\n        // light\n        const light = new THREE.PointLight(0xffffff, 1.5);\n        camera.add(light);\n\n        // model\n        new GLTFLoader().load('/Nefertiti.glb', function (gltf) {\n            gltf.scene.traverse(function (child) {\n                if (child.isMesh) {\n                    // glTF currently supports only tangent-space normal maps.\n                    // this model has been modified to demonstrate the use of an object-space normal map.\n                    child.material.normalMapType = THREE.ObjectSpaceNormalMap;\n                    // attribute normals are not required with an object-space normal map. remove them.\n                    child.geometry.deleteAttribute('normal');\n                    child.material.side = THREE.DoubleSide;\n                    child.scale.multiplyScalar(0.5);\n\n                    // recenter\n                    new THREE.Box3().setFromObject(child).getCenter(child.position).multiplyScalar(-1);\n                    scene.add(child);\n                }\n            });\n            render();\n        });\n        window.addEventListener('resize', onWindowResize);\n    }\n\n    function onWindowResize() {\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n\n        render();\n    }\n\n    function render() {\n        renderer.render(scene, camera);\n    }\n\n    return (\n        <div/>\n    )\n}\n","import * as THREE from \"three\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport {renderHelper} from \"../renderHelper\";\n\nexport const TDTexture = () => {\n    let mesh, renderer, scene, camera;\n    const API = {\n        offsetX: 0,\n        offsetY: 0,\n        repeatX: 0.25,\n        repeatY: 0.25,\n        rotation: Math.PI / 4, // positive is counter-clockwise\n        centerX: 0.5,\n        centerY: 0.5\n    };\n\n    init();\n\n    function init() {\n        renderer = new THREE.WebGLRenderer();\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderHelper(renderer.domElement)\n\n        scene = new THREE.Scene();\n\n        camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 1000);\n        camera.position.set(10, 15, 25);\n        scene.add(camera);\n\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.addEventListener('change', render);\n        controls.minDistance = 20;\n        controls.maxDistance = 50;\n        controls.maxPolarAngle = Math.PI / 2;\n\n        const geometry = new THREE.BoxGeometry(10, 10, 10);\n\n        new THREE.TextureLoader().load('/uv_grid_opengl.jpg', function (texture) {\n            texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n            texture.anisotropy = renderer.capabilities.getMaxAnisotropy();\n            //texture.matrixAutoUpdate = false; // default true; set to false to update texture.matrix manually\n            const material = new THREE.MeshBasicMaterial({map: texture});\n\n            mesh = new THREE.Mesh(geometry, material);\n            scene.add(mesh);\n\n            updateUvTransform();\n            render();\n        });\n        window.addEventListener('resize', onWindowResize);\n    }\n\n    function render() {\n        renderer.render(scene, camera);\n    }\n\n    function onWindowResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        render();\n    }\n\n    function updateUvTransform() {\n        const texture = mesh.material.map;\n        if (texture.matrixAutoUpdate === true) {\n            texture.offset.set(API.offsetX, API.offsetY);\n            texture.repeat.set(API.repeatX, API.repeatY);\n            texture.center.set(API.centerX, API.centerY);\n            texture.rotation = API.rotation; // rotation is around [ 0.5, 0.5 ]\n        } else {\n            // one way...\n            //texture.matrix.setUvTransform( API.offsetX, API.offsetY, API.repeatX, API.repeatY, API.rotation, API.centerX, API.centerY );\n            // another way...\n            texture.matrix\n                .identity()\n                .translate(-API.centerX, -API.centerY)\n                .rotate(API.rotation)                    // I don't understand how rotation can preceed scale, but it seems to be required...\n                .scale(API.repeatX, API.repeatY)\n                .translate(API.centerX, API.centerY)\n                .translate(API.offsetX, API.offsetY);\n        }\n        render();\n    }\n\n    return (<div/>)\n}\n","import * as THREE from \"three\";\nimport {GLTFLoader} from \"three/examples/jsm/loaders/GLTFLoader\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\nimport {GUI} from \"three/examples/jsm/libs/dat.gui.module\";\nimport {renderHelper} from \"../renderHelper\";\n\nexport const TDAnimation = () => {\n    let container, stats, clock, gui, mixer, actions, activeAction, previousAction;\n    let camera, scene, renderer, model, face;\n\n    const api = {state: 'Walking'};\n\n    init();\n    animate();\n\n    function init() {\n        container = document.querySelector('.showDemos')\n        if (!document.querySelector('.showDemos'))return\n\n        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.25, 100);\n        camera.position.set(-5, 3, 10);\n        camera.lookAt(new THREE.Vector3(0, 2, 0));\n\n        scene = new THREE.Scene();\n        scene.background = new THREE.Color(0xe0e0e0);\n        scene.fog = new THREE.Fog(0xe0e0e0, 20, 100);\n\n        clock = new THREE.Clock();\n\n        // lights\n        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444);\n        hemiLight.position.set(0, 20, 0);\n        scene.add(hemiLight);\n\n        const dirLight = new THREE.DirectionalLight(0xffffff);\n        dirLight.position.set(0, 20, 10);\n        scene.add(dirLight);\n\n        // ground\n        const mesh = new THREE.Mesh(new THREE.PlaneGeometry(2000, 2000), new THREE.MeshPhongMaterial({\n            color: 0x999999,\n            depthWrite: false\n        }));\n        mesh.rotation.x = -Math.PI / 2;\n        scene.add(mesh);\n\n        const grid = new THREE.GridHelper(200, 40, 0x000000, 0x000000);\n        grid.material.opacity = 0.2;\n        grid.material.transparent = true;\n        scene.add(grid);\n\n        // model\n        const loader = new GLTFLoader();\n        loader.load('/RobotExpressive.glb', function (gltf) {\n            model = gltf.scene;\n            scene.add(model);\n            createGUI(model, gltf.animations);\n        }, undefined, function (e) {\n            console.error(e);\n        });\n        renderer = new THREE.WebGLRenderer({antialias: true});\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.outputEncoding = THREE.sRGBEncoding;\n        renderHelper(renderer.domElement);\n\n        window.addEventListener('resize', onWindowResize);\n\n        // stats\n        stats = new Stats();\n        container.appendChild(stats.dom);\n    }\n\n    function createGUI(model, animations) {\n        if (document.querySelectorAll('.a')[0]){\n            document.querySelectorAll('.a')[0].remove()\n        }\n        const states = ['Idle', 'Walking', 'Running', 'Dance', 'Death', 'Sitting', 'Standing'];\n        const emotes = ['Jump', 'Yes', 'No', 'Wave', 'Punch', 'ThumbsUp'];\n\n        gui = new GUI();\n\n        mixer = new THREE.AnimationMixer(model);\n\n        actions = {};\n\n        for (let i = 0; i < animations.length; i++) {\n            const clip = animations[i];\n            const action = mixer.clipAction(clip);\n            actions[clip.name] = action;\n            if (emotes.indexOf(clip.name) >= 0 || states.indexOf(clip.name) >= 4) {\n                action.clampWhenFinished = true;\n                action.loop = THREE.LoopOnce;\n            }\n        }\n\n        // states\n        const statesFolder = gui.addFolder('States');\n        const clipCtrl = statesFolder.add(api, 'state').options(states);\n        clipCtrl.onChange(function () {\n            fadeToAction(api.state, 0.5);\n        });\n\n        statesFolder.open();\n\n        // emotes\n        const emoteFolder = gui.addFolder('Emotes');\n        function createEmoteCallback(name) {\n            api[name] = function () {\n                fadeToAction(name, 0.2);\n                mixer.addEventListener('finished', restoreState);\n            };\n            emoteFolder.add(api, name);\n        }\n\n        function restoreState() {\n            mixer.removeEventListener('finished', restoreState);\n            fadeToAction(api.state, 0.2);\n        }\n\n        for (let i = 0; i < emotes.length; i++) {\n            createEmoteCallback(emotes[i]);\n        }\n\n        emoteFolder.open();\n\n        // expressions\n        face = model.getObjectByName('Head_4');\n        const expressions = Object.keys(face.morphTargetDictionary);\n        const expressionFolder = gui.addFolder('Expressions');\n        for (let i = 0; i < expressions.length; i++) {\n            expressionFolder.add(face.morphTargetInfluences, i, 0, 1, 0.01).name(expressions[i]);\n        }\n        activeAction = actions['Walking'];\n        activeAction.play();\n        expressionFolder.open();\n    }\n\n    function fadeToAction(name, duration) {\n        previousAction = activeAction;\n        activeAction = actions[name];\n        if (previousAction !== activeAction) {\n            previousAction.fadeOut(duration);\n        }\n        activeAction\n            .reset()\n            .setEffectiveTimeScale(1)\n            .setEffectiveWeight(1)\n            .fadeIn(duration)\n            .play();\n\n    }\n\n    function onWindowResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function animate() {\n        if (!document.querySelector('.showDemos'))return\n        const dt = clock.getDelta();\n        if (mixer) mixer.update(dt);\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n        stats.update();\n    }\n\n    return <div/>\n}","import * as THREE from \"three\";\nimport {renderHelper} from \"../renderHelper\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport {useEffect} from \"react\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\n\nexport const TDEarth = () => {\n    let scene, camera, renderer, earthMesh, cloudsMesh, light, controls, stats\n\n    threeStart();\n\n    function initScene() {\n        scene = new THREE.Scene();\n    }\n\n    function initCamera() {\n        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\n        camera.position.x = -500;\n        camera.position.y = 500;\n        camera.position.z = -500;\n    }\n\n    // 渲染器\n    function initThree() {\n        // 实例化 THREE.WebGLRenderer 对象。\n        renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n            canvas: renderer\n        });\n        // 设置 renderer 的大小\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        // 挂载到准备的 domElement 上\n        renderHelper(renderer.domElement)\n        // Sets the clear color and opacity.\n        renderer.setClearColor(0x000000, 1.0);\n    }\n\n    // 地球\n    function initEarth() {\n        // 实例化一个半径为 200 的球体\n        const earthGeo = new THREE.SphereGeometry(200, 100, 100);\n        const earthMater = new THREE.MeshPhongMaterial({\n            map: new THREE.TextureLoader().load('/earthNormal.jpg')\n        });\n        earthMesh = new THREE.Mesh(earthGeo, earthMater);\n        scene.add(earthMesh);\n\n    }\n\n    // 云\n    function initClouds() {\n        // 实例化一个球体，半径要比地球的大一点，从而实现云飘咋地球上的感觉\n        const cloudsGeo = new THREE.SphereGeometry(201, 100, 100);\n\n        // transparent 与 opacity 搭配使用，设置材质的透明度，当 transparent 设为 true 时， 会对材质特殊处理，对性能会有些损耗。\n        const cloudsMater = new THREE.MeshPhongMaterial({\n            alphaMap: new THREE.TextureLoader().load('/clouds.jpg'),\n            transparent: true,\n            opacity: 0.2\n        });\n\n        cloudsMesh = new THREE.Mesh(cloudsGeo, cloudsMater);\n        scene.add(cloudsMesh);\n    }\n\n    // 帧蘋\n    function initStats() {\n        stats = new Stats();\n        const container = document.querySelector('.showDemos')\n        if (!container) return\n        container.appendChild(stats.dom)\n    }\n\n    // 光源\n    function initLight() {\n        // A light source positioned directly above the scene, with color fading from the sky color to the ground color.\n        // 位于场景正上方的光源，颜色从天空颜色渐变为地面颜色。\n        //  var light = new THREE.HemisphereLight(0xffffbb, 0x080820, 1);\n        // scene.add(light);\n\n        // 环境光\n        light = new THREE.AmbientLight(0xFFFFFF);\n        light.position.set(100, 100, 200);\n        scene.add(light);\n\n        // 平行光\n        // 位置不同，方向光作用于物体的面也不同，看到的物体各个面的颜色也不一样\n        // light = new THREE.DirectionalLight(0xffffbb, 1);\n        // light.position.set(-1, 1, 1);\n        // scene.add(light);\n    }\n\n    function threeStart() {\n        initThree();\n        initScene();\n        initCamera();\n        initStats();\n        initLight();\n        initEarth();\n        initClouds();\n        // 载入控制器\n        controls = new OrbitControls(camera, renderer.domElement);\n        renderer.clear();\n        animate();\n    }\n\n    function animate() {\n        controls.update();\n        stats.update();\n        // 地球自转\n        earthMesh.rotation.y -= 0.002;\n        // 漂浮的云层\n        cloudsMesh.rotation.y -= 0.005;\n        cloudsMesh.rotation.z += 0.005;\n        renderer.render(scene, camera);\n        requestAnimationFrame(animate);\n    }\n\n    return <div/>\n}","import * as THREE from \"three\";\nimport {renderHelper} from \"../renderHelper\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport {useEffect} from \"react\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\n\nexport const BeautifulEarth = () => {\n    let scene, camera, renderer, earthMesh, cloudsMesh, light, controls, stats, pointMesh = null\n\n    useEffect(() => {\n        threeStart();\n    }, [threeStart])\n\n    function initScene() {\n        scene = new THREE.Scene();\n    }\n\n    function initCamera() {\n        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\n        camera.position.x = -500;\n        camera.position.y = 500;\n        camera.position.z = -500;\n    }\n\n    // 渲染器\n    function initThree() {\n        // 实例化 THREE.WebGLRenderer 对象。\n        renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n            canvas: renderer\n        });\n        // 设置 renderer 的大小\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        // 挂载到准备的 domElement 上\n        renderHelper(renderer.domElement)\n        // Sets the clear color and opacity.\n        renderer.setClearColor(0x000000, 1.0);\n    }\n\n    // 星空\n    function initStars() {\n        const positions = [];\n        const colors = [];\n        const geometry = new THREE.BufferGeometry();\n        for (let i = 0; i < 5000; i++) {\n            const vertex = new THREE.Vector3();\n            vertex.x = Math.random() * 2 - 1;\n            vertex.y = Math.random() * 2 - 1;\n            vertex.z = Math.random() * 2 - 1;\n            positions.push(vertex.x, vertex.y, vertex.z);\n            const color = new THREE.Color();\n            color.setHSL(Math.random() * 0.2 + 0.5, 0.55, Math.random() * 0.25 + 0.55);\n            colors.push(color.r, color.g, color.b);\n        }\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n        const starsMaterial = new THREE.ParticleBasicMaterial({\n            size: 1,\n            transparent: true,\n            opacity: 1,\n            vertexColors: true, //true：且该几何体的colors属性有值，则该粒子会舍弃第一个属性--color，而应用该几何体的colors属性的颜色\n            blending: THREE.AdditiveBlending,\n            sizeAttenuation: true\n        });\n        const stars = new THREE.ParticleSystem(geometry, starsMaterial);\n        stars.scale.set(300, 300, 300);\n        scene.add(stars);\n    }\n\n    // 地球\n    function initEarth() {\n        // 实例化一个半径为 200 的球体\n        const earthGeo = new THREE.SphereGeometry(200, 100, 100);\n        const earthMater = new THREE.MeshPhongMaterial({\n            map: new THREE.TextureLoader().load('/earth_atmos_2048.jpg')\n        });\n        earthMesh = new THREE.Mesh(earthGeo, earthMater);\n        scene.add(earthMesh);\n    }\n\n    // 云\n    function initClouds() {\n        // 实例化一个球体，半径要比地球的大一点，从而实现云飘咋地球上的感觉\n        const cloudsGeo = new THREE.SphereGeometry(201, 100, 100);\n\n        // transparent 与 opacity 搭配使用，设置材质的透明度，当 transparent 设为 true 时， 会对材质特殊处理，对性能会有些损耗。\n        const cloudsMater = new THREE.MeshPhongMaterial({\n            alphaMap: new THREE.TextureLoader().load('/earth_clouds_2048.png'),\n            transparent: true,\n            opacity: 0.2\n        });\n\n        cloudsMesh = new THREE.Mesh(cloudsGeo, cloudsMater);\n        scene.add(cloudsMesh);\n    }\n\n    // 帧蘋\n    function initStats() {\n        stats = new Stats();\n        const container = document.querySelector('.showDemos')\n        if (!container) return\n        container.appendChild(stats.dom)\n    }\n\n    // 光源\n    function initLight() {\n        // 位于场景正上方的光源，颜色从天空颜色渐变为地面颜色。\n        // light = new THREE.HemisphereLight(0xffffbb, 0x080820, 1);\n\n        // 环境光\n        light = new THREE.AmbientLight(0xFFFFFF);\n        light.position.set(100, 100, 200);\n        scene.add(light);\n\n        // 平行光 位置不同，方向光作用于物体的面也不同，看到的物体各个面的颜色也不一样\n        // light = new THREE.DirectionalLight(0xffffbb, 1);\n        // light.position.set(-1, 1, 1);\n    }\n\n    /**\n     *lng:经度\n     *lat:维度\n     *radius:地球半径\n     */\n    function Point(lng, lat, radius) {\n        const theta = (90 + lng) * (Math.PI / 180)\n        const phi = (90 - lat) * (Math.PI / 180)\n        return (new THREE.Vector3()).setFromSpherical(new THREE.Spherical(radius, phi, theta))\n    }\n\n    function createPointMesh() {\n        // 打点\n        const material = new THREE.MeshBasicMaterial({\n            map: new THREE.TextureLoader().load('/location.png'),\n            transparent: true, //使用背景透明的png贴图，注意开启透明计算\n            // side: THREE.DoubleSide, //双面可见\n            depthWrite: false, //禁止写入深度缓冲区数据\n        });\n        const planGeometry = new THREE.PlaneGeometry(3, 3);\n        pointMesh = new THREE.Mesh(planGeometry, material);\n        const size = 5;//矩形平面Mesh的尺寸\n        pointMesh.scale.set(size, size, size);//设置mesh大小\n        //设置mesh位置\n        const coord = Point(104.071833, 30.580517, 200 * 1.01)\n\n        // 字体\n        new THREE.FontLoader().load('/helvetiker_bold.typeface.json', function (font) {\n            const color = 0x006699;\n            const matLite = new THREE.MeshBasicMaterial({\n                color: color,\n                opacity: 0.4,\n                side: THREE.DoubleSide\n            });\n            const message = \"chengdu\";\n            const shapes = font.generateShapes(message, 8);\n            const geometry = new THREE.ShapeGeometry(shapes);\n            geometry.computeBoundingBox();\n            const text = new THREE.Mesh(geometry, matLite);\n            text.position.set(coord.x + 16, coord.y + 12, coord.z - 2);\n            text.rotateY(Math.PI)\n            scene.add(text);\n        });\n\n        // 圆锥\n        const aGeo = new THREE.ConeGeometry(8, 30, 30);\n        // 创建分段节点处类的材质\n        const aMater = new THREE.MeshPhongMaterial({\n            color: 0x4076fa,\n            transparent: true,\n            opacity: 0.9\n        })\n        const aMesh = new THREE.Mesh(aGeo, aMater);\n        const bMesh = aMesh.rotateX(Math.PI / 2)\n\n        const groupMesh = new THREE.Group()\n        groupMesh.add(pointMesh, bMesh);\n        groupMesh.position.set(coord.x, coord.y, coord.z);\n        // mesh在球面上的法线方向(球心和球面坐标构成的方向向量)\n        const coordVec3 = new THREE.Vector3(coord.x, coord.y, coord.z).normalize();\n        // mesh默认在XOY平面上，法线方向沿着z轴new THREE.Vector3(0, 0, 1)\n        const meshNormal = new THREE.Vector3(0, 0, 1);\n        // 四元数属性.quaternion表示mesh的角度状态\n        //.setFromUnitVectors();计算两个向量之间构成的四元数值\n        groupMesh.quaternion.setFromUnitVectors(meshNormal, coordVec3);\n\n        setTimeout(() => {\n            scene.add(groupMesh);\n        }, 1000)\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    function threeStart() {\n        initThree();\n        initScene();\n        initCamera();\n        initStars()\n        initStats();\n        initLight();\n        initEarth();\n        initClouds();\n        createPointMesh()\n        // 载入控制器\n        controls = new OrbitControls(camera, renderer.domElement);\n        animate();\n    }\n\n    function animate() {\n        stats.update();\n        // 地球自转\n        // earthMesh.rotation.y -= 0.02;\n        // rStatus -= 0.05\n        // if (rStatus>=0){\n        //     const axis = new THREE.Vector3(1, 0, 0);\n        //     earthMesh.rotateOnAxis(axis, Math.PI / 20)\n        // }\n\n\n        // 漂浮的云层\n        cloudsMesh.rotation.y -= 0.005;\n        cloudsMesh.rotation.z += 0.005;\n\n        renderer.clear();\n        renderer.render(scene, camera);\n        requestAnimationFrame(() => {\n            if (controls) {\n                controls.update();\n                animate()\n            }\n        });\n    }\n\n    return <div/>\n}","export const LOCATIONS = [{\n    name: 'SHANGHAI',\n    coord: [30.40, 120.52] // 30° 40' N, 120° 52' E\n}, {\n    name: 'BEIJING',\n    coord: [39.92, 116.46] // 39° 92' N, 116° 46' E\n}, {\n    name: 'WASHINGTON',\n    coord: [38.91, -77.02] // 38° 91' N, 77° 02' W\n}, {\n    name: 'MELBOURNE',\n    coord: [-37.50, 144.58] // 37° 50' S, 144° 58' E\n}, {\n    name: 'RIO',\n    coord: [-22.54, -43.12] // 22° 54' S，43° 12' W\n},\n    {\n        name: 'LONDON',\n        coord: [51.30, 0.5] // 22° 54' S，43° 12' W\n    },\n    {\n        name: 'ANTARCTICA',\n        coord: [-90,360]\n    },\n    {\n        name: 'GREENLAND',\n        coord: [75.930886,-40.253906]\n    },\n    {\n        name: 'NAMIBIA',\n        coord: [-22.57,17.086117]\n    }\n]","import * as THREE from \"three\";\nimport {renderHelper} from \"../renderHelper\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport {LOCATIONS} from \"./city\";\nimport {TWEEN} from \"three/examples/jsm/libs/tween.module.min\";\nimport {degToRad} from \"three/src/math/MathUtils\";\nimport {useEffect} from \"react\";\nimport './city.css'\n\nexport const EarthScreen = () => {\n    let scene, camera, renderer, earthMesh, light, controls, stats,\n        tween, city = null\n    const mouse = new THREE.Vector2();\n    const locationGroup = new THREE.Group();\n    const raycaster = new THREE.Raycaster()\n    const textureLoader = new THREE.TextureLoader();\n    const correctRotate = (Math.PI / 2).toFixed(2)\n\n    useEffect(() => {\n        threeStart();\n        rotateToCity('SHANGHAI')\n    }, [])\n\n    function initScene() {\n        scene = new THREE.Scene();\n        scene.opacity = 0;\n        scene.transparent = true;\n    }\n\n    function initCamera() {\n        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);\n        camera.position.z = 500;\n    }\n\n    // 渲染器\n    function initThree() {\n        // 实例化 THREE.WebGLRenderer 对象。\n        renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n            canvas: renderer\n        });\n        // 设置 renderer 的大小\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        // 挂载到准备的 domElement 上\n        renderHelper(renderer.domElement)\n        // Sets the clear color and opacity.\n        renderer.setClearColor(0x000000, 1.0);\n    }\n\n    // 帧蘋\n    function initStats() {\n        stats = new Stats();\n        const container = document.querySelector('.showDemos')\n        if (!container) return\n        container.appendChild(stats.dom)\n    }\n\n    // 地球\n    function initEarth() {\n        // 实例化一个半径为 200 的球体\n        const earthGeo = new THREE.SphereGeometry(200, 100, 100);\n        const earthMater = new THREE.MeshPhongMaterial({\n            specular: 0x404040,\n            shininess: 5,\n            map: textureLoader.load('/earth.jpg'),\n            specularMap: textureLoader.load('/earth_spec.jpg'),\n            bumpMap: textureLoader.load('/earth_bump.jpg')\n        });\n        earthMesh = new THREE.Mesh(earthGeo, earthMater);\n        earthMesh.rotation.y = -correctRotate;\n        earthMesh.name = \"earth\"\n        scene.add(earthMesh);\n    }\n\n    // 光源\n    function initLight() {\n        // 位于场景正上方的光源，颜色从天空颜色渐变为地面颜色。\n        // light = new THREE.HemisphereLight(0xffffbb, 0x080820, 1);\n\n        // 环境光\n        const allLight = new THREE.AmbientLight(0xFFFFFF);\n        allLight.position.set(100, 100, 200);\n\n        // 平行光 位置不同，方向光作用于物体的面也不同，看到的物体各个面的颜色也不一样\n        light = new THREE.DirectionalLight(0xffffbb, 1);\n        light.position.set(-11, 3, 1);\n\n        const sun = new THREE.SpotLight(0x393939, 2.5);\n        sun.position.set(-15, 10, 21);\n\n        scene.add(allLight, light, sun);\n    }\n\n    /**\n     *lng:经度\n     *lat:维度\n     *radius:地球半径\n     */\n    function Point(lng, lat, radius) {\n        const lg = THREE.Math.degToRad(lng),\n            lt = THREE.Math.degToRad(lat);\n        const y = radius * Math.sin(lt);\n        const temp = radius * Math.cos(lt);\n        const x = temp * Math.sin(lg);\n        const z = temp * Math.cos(lg);\n        return {x: x, y: y, z: z}\n    }\n\n    function createPointMesh() {\n        // 打点\n        LOCATIONS.forEach(location => {\n                //设置坐标\n                const sprite = new THREE.Sprite(new THREE.SpriteMaterial(\n                    {\n                        map: textureLoader.load('/location.png'),\n                        depthWrite: false, //禁止写入深度缓冲区数据\n                    }));\n                const pos = Point(location.coord[1], location.coord[0], 200 * 1.05)\n                sprite.coord = {lg: location.coord[1], lt: location.coord[0]}\n                sprite.position.set(pos.x, pos.y, pos.z);\n                sprite.scale.set(20, 20, 1);\n                sprite.name = location.name\n                //城市名\n                const spriteText = new THREE.Sprite(new THREE.SpriteMaterial(\n                    {\n                        color: 0x000000,\n                        map: textureLoader.load(`/i_${(location.name).toLowerCase()}.png`),\n                        depthWrite: false, //禁止写入深度缓冲区数据\n                    }));\n                spriteText.position.set(pos.x, pos.y, pos.z);\n                spriteText.scale.set(50, 50, 1.5);\n                locationGroup.add(sprite, spriteText);\n                scene.add(locationGroup);\n            }\n        )\n    }\n\n    function rotate2Center(coord) {\n        return {x: degToRad(coord.lt), y: degToRad(coord.lg)};\n    }\n\n    function rotateEarth(intervalX, intervalY) {\n        if (tween) tween.stop();\n        tween = new TWEEN.Tween({\n            rotateY: earthMesh.rotation.y,\n            rotateX: earthMesh.rotation.x,\n            rotateLoc: locationGroup.rotation.y\n        })\n            .to({\n                rotateY: earthMesh.rotation.y + intervalY,\n                rotateX: earthMesh.rotation.x + intervalX,\n                rotateLoc: locationGroup.rotation.y + intervalY\n            }, 1000);\n        tween.easing(TWEEN.Easing.Sinusoidal.InOut);\n        const onUpdate = function () {\n            earthMesh.rotation.y = this._object.rotateY;\n            earthMesh.rotation.x = this._object.rotateX;\n            locationGroup.rotation.y = this._object.rotateLoc;\n            locationGroup.rotation.x = this._object.rotateX;\n        }\n        const onComplete = function () {\n        }\n        tween.onUpdate(onUpdate);\n        tween.onComplete(onComplete);\n        tween.start();\n    }\n\n    function onPointClick(e) {\n        e.preventDefault();\n        // 鼠标点击位置的屏幕坐标转换成threejs中的标准坐标-1<x<1, -1<y<1\n        mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\n        mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n        raycaster.setFromCamera(mouse, camera);\n        // 获取raycaster直线和所有模型相交的数组集合\n        const intersects = raycaster.intersectObjects(locationGroup.children, true);\n        if (intersects.length > 0 && intersects[0].object.name) {\n            // 只取第一个相交物体\n            if (city) city.scale.set(20, 20, 1);\n            city = intersects[0].object;\n            rotateToCenter(city)\n        }\n    }\n\n    function rotateToCenter(city) {\n        // 放大\n        city.scale.set(30, 30, 1);\n\n        // 显示城市名\n        const cityName = city.name;\n        const cityText = document.querySelector(\".showCity\");\n        setTimeout(function () {\n            cityText.innerText = cityName;\n        }, 500)\n\n        // 旋转到中心\n        const rotateRad = rotate2Center(city.coord);\n        let finalY = -rotateRad.y;\n        while (earthMesh.rotation.y > 0 && finalY + Math.PI * 2 < earthMesh.rotation.y) finalY += Math.PI * 2;\n        while (earthMesh.rotation.y < 0 && finalY - Math.PI * 2 > earthMesh.rotation.y) finalY -= Math.PI * 2;\n        if (Math.abs(finalY - earthMesh.rotation.y) > Math.PI) {\n            if (finalY > earthMesh.rotation.y) finalY -= Math.PI * 2;\n            else finalY += Math.PI * 2;\n        }\n        const needRotateX = rotateRad.x - earthMesh.rotation.x + controls.object.rotation.x\n        const needRotateY = finalY - earthMesh.rotation.y - correctRotate + controls.object.rotation.y\n        rotateEarth(needRotateX, needRotateY);\n    }\n\n    function rotateToCity(cityName) {\n        city = locationGroup.children.find((location) => {\n            return location.name === cityName\n        })\n        rotateToCenter(city)\n    }\n\n    function startControl() {\n        document.addEventListener('mousedown', onPointClick);\n        // 载入控制器\n        controls = new OrbitControls(camera, renderer.domElement);\n    }\n\n    function threeStart() {\n        initThree();\n        initScene();\n        initCamera();\n        initStats();\n        initLight();\n        initEarth();\n        createPointMesh()\n        startControl()\n        animate();\n    }\n\n    function animate() {\n        stats.update();\n        renderer.clear();\n        renderer.render(scene, camera);\n        requestAnimationFrame(() => {\n            TWEEN.update();\n            if (controls) {\n                controls.update();\n                animate()\n            }\n        });\n    }\n\n    return <div className='showCity'/>\n}","import './App.css';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport {InitDemo} from \"./demo/初始demo\";\nimport {DrawLineDemo} from \"./demo/画线demo\";\nimport {Home} from \"./demo/Home\";\nimport {FontDemo} from \"./demo/文字demo\";\nimport {TDGlb} from \"./demo/3DGlb\";\nimport {TDTexture} from \"./demo/3DDTexture\";\nimport {TDAnimation} from \"./demo/3DAnimat\";\nimport {TDEarth} from \"./demo/3DEarth\";\nimport {BeautifulEarth} from \"./demo/BeautifulEarth\";\nimport {EarthScreen} from \"./EarthScreen/EarthScreen\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Home/>\n                <Route exact path=\"/\"/>\n                <Route path=\"/DrawLineDemo\" component={DrawLineDemo}/>\n                <Route path=\"/InitDemo\" component={InitDemo}/>\n                <Route path=\"/FontDemo\" component={FontDemo}/>\n                <Route path=\"/3DGlb\" component={TDGlb}/>\n                <Route path=\"/3DTexture\" component={TDTexture}/>\n                <Route path=\"/TDAnimation\" component={TDAnimation}/>\n                <Route path=\"/TDEarth\" component={TDEarth}/>\n                <Route path=\"/BeautifulEarth\" component={BeautifulEarth}/>\n                <Route path=\"/EarthScreen\" component={EarthScreen}/>\n            </BrowserRouter>\n            <div className='showDemos'/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}